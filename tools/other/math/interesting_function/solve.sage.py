

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_19 = Integer(19)
def get_integ(n, a=_sage_const_0 , b=_sage_const_1 ):
    d = get_f(n)
    d = sorted(list(d.items()), key=lambda x: x[_sage_const_0 ])
    su = _sage_const_0 
    for i in range(len(d) - _sage_const_1 ):
        if d[i][_sage_const_0 ] < a:
            continue
        elif d[i][_sage_const_0 ] > b:
            continue
        x0, y0 = d[i]
        x1, y1 = d[i + _sage_const_1 ]
        fl = x1 - x0
        fu = (y0 + y1) / _sage_const_2 
        su += fu * fl
    return su

def get_f(n):
    d = dict()
    d[_sage_const_1 /_sage_const_2 ] = _sage_const_1 
    d[_sage_const_0 ] = _sage_const_0 
    for i in range(_sage_const_2 , n):
        for j in range(_sage_const_0 , _sage_const_2 **(i - _sage_const_1 ), _sage_const_2 ):
            #print(2**(-i) + (j) * 2**(-i))
            d[_sage_const_2 **(-i) + (j) * _sage_const_2 **(-i)] = _sage_const_1  / (_sage_const_1 /(d[_sage_const_2 **(-i + _sage_const_1 ) + (j) * _sage_const_2 **(-i + _sage_const_1 )])+ _sage_const_1 )
            d[_sage_const_1  - _sage_const_2 **(-i) - (j) * _sage_const_2 **(-i)] = (_sage_const_1 /(d[_sage_const_2 **(-i + _sage_const_1 ) + (j) * _sage_const_2 **(-i + _sage_const_1 )])+ _sage_const_1 )
    return d

print(get_integ(_sage_const_19 ).n())

