

# This file was *autogenerated* from the file pollardfactorial.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_100 = Integer(100); _sage_const_0 = Integer(0); _sage_const_15 = Integer(15); _sage_const_20 = Integer(20); _sage_const_10 = Integer(10); _sage_const_5 = Integer(5); _sage_const_35 = Integer(35)
from sage.all import *
from time import time, sleep
from pylab import plot, show
def PollardP(n):
    while(True):
        a = randint(_sage_const_2 , n)
        for i in range(_sage_const_1 , _sage_const_100 ):
            a = pow(a, i, n)
            if(a-_sage_const_1  == _sage_const_0 ):
                break
            if(gcd(a-_sage_const_1 , n) == _sage_const_1 ):
                continue
            print(a, i)
            return gcd(a-_sage_const_1 , n)

def time_check(nbit, n):
    m = _sage_const_0 
    for i in range(n):
        z1, z2 = random_prime(_sage_const_2 **nbit), random_prime(_sage_const_2 **nbit)
        k = z1*z2
        print(f"--------------{i+_sage_const_1 } test-------------")
        print(f"p = {z1}, q = {z2}, p*q = {k}")
        x = time()
        PollardP(k)
        x = time() - x
        m += x
        print(f"time: {x}")
        print(f"-------------------------------------")
    print(f"nbit: {nbit},average time: {m / n}")
    return m / n
    
if __name__ == "__main__":
    n = int(input("factor what? "))
    print(PollardP(n))
    t = []
    for i in range(_sage_const_15 ):
        t.append(time_check(_sage_const_20  + i, _sage_const_10 ))
        print("5 sec to think")
        sleep(_sage_const_5 )
    x = plot(range(_sage_const_20 , _sage_const_35 ), t)
    show()


