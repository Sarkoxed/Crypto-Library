from sage.all import GF, ZZ, EllipticCurve, Qp, randint, random_prime


def mul(P, n):
    if n < 0:
        P = -P
        n = -n
    b = bin(n)[2:]
    Q = P
    for i in b[1:]:
        Q = add(Q, Q)
        if i == "1":
            Q = add(Q, P)
    return Q


def a0(P, Q):
    if P.is_zero() or Q.is_zero() or P == -Q:
        return 0

    if P == Q:
        t = P.curve().a4()
        return (3 * P[0] ** 2 + t) * pow(2 * P[1], -1)

    return (P[1] - Q[1]) * pow(P[0] - Q[0], -1)


def add(P, Q):
    p1, scal1 = P
    p2, scal2 = Q
    p3 = p1 + p2
    scal3 = scal1 + scal2 + a0(p1, p2)
    return p3, scal3


def test_cryptohack():
    p = 0xA15C4FB663A578D8B2496D3151A946119EE42695E18E13E90600192B1D0ABDBB6F787F90C8D102FF88E284DD4526F5F6B6C980BF88F1D0490714B67E8A2A2B77
    print(p)
    a = 0x5E009506FCC7EFF573BC960D88638FE25E76A9B6C7CAEEA072A27DCD1FA46ABB15B7B6210CF90CABA982893EE2779669BAC06E267013486B22FF3E24ABAE2D42
    b = 0x2CE7D1CA4493B0977F088F6D30D9241F8048FDEA112CC385B793BCE953998CAAE680864A7D3AA437EA3FFD1441CA3FB352B0B710BB3F053E980E503BE9A7FECE

    E = EllipticCurve(GF(p), [a, b])
    P = E(
        (
            5448322422834546084815428952079242885481708324109546861579460283474841883078166794488596411411933060104520941983533856772507716328379474374778713013742391,
            7977289869684530880835416558584222038416682321016829325965827406008463222975917450216553356932977288905259417243805560075093126046795676479258230624962650,
        )
    )
    Q = E(
        (
            5326797114467501127056273625205930485767192462999021534913782540545394587052140740569881026613671364386705356969137224373496765383378008686886427757902855,
            2937334247893084041189005399505836138974114037868203195050395176159973572582882292907317830598844421438418745974388072083634862449120126098381914039560794,
        )
    )

    G = GF(p)

    R1, alpha = mul((P, G(0)), p)
    R2, beta = mul((Q, G(0)), p)
    R3, gamma = add((P, alpha), (Q, beta))
    R4, tetta = mul((P + Q, G(0)), p)

    R5, sigma = add((Q, beta), (P, alpha))
